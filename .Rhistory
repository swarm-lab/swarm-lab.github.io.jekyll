runApp('Desktop/shiny')
runApp('Desktop/shiny')
?browseURL
getOption("browser")
?runApp
getOption("shiny.launch.browser", interactive())
getOption("shiny.launch.browser")
invisible(.Call("rs_shinyviewer", url, getwd(), 3))
invisible(.Call("rs_shinyviewer", "http://127.0.0.1:6194/", getwd(), 3))
runApp('Desktop/shiny')
runApp('Desktop/shiny')
runApp('Desktop/shiny')
runApp('Desktop/shiny')
getOption("shiny.launch.browser", interactive())
runApp('Desktop/shiny')
runApp('Desktop/shiny')
eval(parse(text = "function(url) {invisible(.Call('rs_shinyviewer', url, getwd(), 3))}"))
runApp('Desktop/shiny')
runApp('Desktop/shiny')
runApp('Desktop/shiny')
runApp('Desktop/shiny')
?shinyjs::reset
runApp('Desktop/shiny')
runApp('Desktop/shiny')
getOption("browser")
browserViewer
runApp('Desktop/shiny')
runApp('Desktop/shiny')
?setBookmarkExclude
runApp('Desktop/shiny')
?runApp
runApp('Desktop/shiny')
utils::browseURL
?utils::browseURL
getOption("shiny.launch.browser", interactive())
runApp('Desktop/shiny')
runApp('Desktop/shiny')
?.Call
]
runApp
getOption("shiny.launch.browser",
interactive())
runApp('Desktop/shiny')
runApp('Desktop/shiny')
runApp('Desktop/shiny')
runApp('Desktop/shiny')
?runUrl
runUrl
getOption(shiny.launch.browser)
getOption("shiny.launch.browser")
a <- getOption("shiny.launch.browser")
class(a)
a
a("http://www.google.com")
runApp('Desktop/shiny')
runApp('Desktop/shiny')
runApp('Desktop/shiny')
runApp('Desktop/shiny')
runApp('Desktop/shiny')
runApp('Desktop/shiny')
runApp('Desktop/shiny')
runApp('Desktop/shiny')
runApp('Desktop/shiny')
runApp('Desktop/shiny')
runApp('Desktop/shiny')
runApp('Desktop/shiny')
runApp('Desktop/shiny')
runApp('Desktop/shiny')
install.packages("future")
library(Rvision)
library(future)
my_stream <- stream(0)
?future
?display
1/ 30
future({
while (TRUE) {
display(readNext(my_stream))
}
})
plan(multisession)
future({
while (TRUE) {
display(readNext(my_stream))
}
})
truc <- future({
while (TRUE) {
display(readNext(my_stream))
}
})
truc
truc()
value(truc)
release(my_stream)
destroyAllDisplays()
my_stream <- stream(0)
plan(multiprocess)
fn <- function(the_stream) {
while (TRUE) {
display(readNext(the_stream))
}
}
fn(my_stream)
res %<-% fn(my_stream)
res
res
res
plan(multisession)
res %<-% fn(my_stream)
res
res
release(my_stream)
destroyAllDisplays()
library(Rvision)
library(future)
plan(multisession)
library(Rvision)
library(future)
plan(multisession)
fn <- function(the_stream) {
my_stream <- stream(the_stream)
while (TRUE) {
display(readNext(the_stream))
}
}
res %<-% fn(0)
res
res
res
release(my_stream)
library(Rvision)
library(future)
plan(multisession)
plan(multisession)
fn <- function(the_stream) {
my_stream <- stream(the_stream)
while (TRUE) {
display(readNext(my_stream))
}
}
res %<-% fn(0)
res
?kable
?knitr::`knitr-package`
?knitr::kable
library(rvest)
library(knitr)
scholar_tab <- "https://scholar.google.com/citations?user=4MNHWX8AAAAJ" %>%
read_html(.) %>%
html_nodes(xpath='//*[@id="gsc_rsb_st"]') %>%
html_table(fill = TRUE)
names(scholar_tab[[1]])[1] <- paste0("As of ", format(Sys.time(), "%B %d, %Y"))
kable(scholar_tab)
?kable_styling
install.packages("kableExtra")
library(kableExtra)
?kable_styling
kable(scholar_tab) %>%
kable_styling(bootstrap_options = c("striped"))
options("pkgType")
?options
fn <- function(x) {
1 / x
}
x <- 0:100
plot(fn(x) ~ x)
fn <- function(x) {
1 - (1 / x)
}
x <- 0:100
plot(fn(x) ~ x)
fn(x)
fn <- function(x) {
1 - (1 / (x + 1))
}
x <- 0:100
plot(fn(x) ~ x)
fn(x)
fn <- function(x, a = 1, b = 1) {
1 - (a / (x + b))
}
x <- 0:100
plot(fn(x) ~ x)
fn <- function(x, a = 1, b = 1) {
1 - (a / (x + b))
}
x <- 0:100
plot(fn(x) ~ x, type = "l")
fn <- function(x, a = 1, b = 1) {
1 - (a / (x + b))
}
x <- 0:100
plot(fn(x, a = 4) ~ x, type = "l")
fn <- function(x, a = 1, b = 1) {
a - (a / (x + b))
}
x <- 0:100
plot(fn(x, a = 4) ~ x, type = "l")
fn <- function(x, a = 1, b = 1) {
a - (a / (x + b))
}
x <- 0:100
plot(fn(x, b = 4) ~ x, type = "l")
install.packages("future.apply")
my_stream <- stream(0)   # 0 will start your default webcam in general.
library(Rvision)
my_stream <- stream(0)   # 0 will start your default webcam in general.
my_selfie <- readNext(my_stream)
plot(my_selfie)
release(my_stream)
library(Rvision)
my_stream <- stream(0)   # 0 will start your default webcam in general.
library(sf)
sf::st_point(c(1, 2))
a <- sf::st_point(c(1, 2))
plot(a)
b <- sf::st_point(c(3, 4))
a - b
(a - b) ^ 2
st_distance(a, b)
a <- sf::st_point(c(0, 0))
b <- sf::st_point(c(1, 0))
st_distance(a, b)
a
?st_point
a <- sf::st_point(c(0, 0, 0))
b <- sf::st_point(c(1, 0, 0))
st_distance(a, b)
df <- data.frame(id = 1:2, coords = c(a, b))
c(a, b)
st_set_crs(a, "+proj=utm +zone=19 +ellps=GRS80 +datum=NAD83")
?setClass
setClass("track", slots = (data = "data.frame", type = "character"))
setClass("track", slots = c(data = "data.frame", type = "character"))
test <- new("track", data  = data.frame(x = runif(10), y = runif(10), z = runif(10), t = runif(10)), type = "geo")
test
library(dplyr)
test %>%
filter(., x > 0.5)
test
class(test)
df <- data.frame(x = runif(10), y = runif(10), z = runif(10), t = runif(10))
df <- data.frame(x = runif(10), y = runif(10), z = runif(10), t = runif(10))
st_as_sf(df, coords = c("x", "y", "z"))
test <- st_as_sf(df, coords = c("x", "y", "z"))
test$geometry
filter(test, time > 0.5)
filter(test, t > 0.5)
filter(test, x > 0.5)
isS4(test)
test <- new("track", data  = data.frame(x = runif(10), y = runif(10), z = runif(10), t = runif(10)), type = "geo")
isS4(test)
setClass("track", contains = "data.frame", slots = c(type = "character"))
test <- new("track", data  = data.frame(x = runif(10), y = runif(10), z = runif(10), t = runif(10)), type = "geo")
test <- new("track", type = "geo")
test
setClass("track", contains = "data.frame", slots = c(type = "character"))
test <- new("track", data.frame(x = runif(10), y = runif(10), z = runif(10), t = runif(10)), type = "geo")
test
filter(test, x > 0.5)
test <- new("track", data.frame(x = runif(10), y = runif(10), z = runif(10), t = runif(10)), type = "geo")
setClass("track", slots = c(data = "data.frame", type = "character"))
test <- new("track", data.frame(x = runif(10), y = runif(10), z = runif(10), t = runif(10)), type = "geo")
test <- new("track", data = data.frame(x = runif(10), y = runif(10), z = runif(10), t = runif(10)), type = "geo")
test
test@data
?filter_
library(dplyr)
setClass("track", slots = c(data = "data.frame", type = "character"))
test <- new("track", data = data.frame(x = runif(10), y = runif(10), z = runif(10), t = runif(10)), type = "geo")
filter.track <- function(x, ...) {
new("track", data = dplyr::filter(x@data, ...), type = x@type)
}
filter(test, x > 0.5)
$
`$`
?`$`
library(dplyr)
setClass("track", slots = c(data = "data.frame", type = "character"))
test <- new("track", data = data.frame(x = runif(10), y = runif(10), z = runif(10), t = runif(10)), type = "geo")
filter.track <- function(x, ...) {
new("track", data = dplyr::filter(x@data, ...), type = x@type)
}
`$`.track <- function(x, var) {
x@data[[var]]
}
`$`.track <- function(x, var) {
x@data[[var]]
}
$.track <- function(x, var) {
x@data[[var]]
}
`$`.track <- function(x, var) {
x@data[[var]]
}
`$`.track
`[`.track
library(dplyr)
setClass("track", slots = c(data = "data.frame", type = "character"))
test <- new("track", data = data.frame(x = runif(10), y = runif(10), z = runif(10), t = runif(10)), type = "geo")
filter.track <- function(x, ...) {
new("track", data = dplyr::filter(x@data, ...), type = x@type)
}
`$.track` <- function(x, var) {
x@data[[var]]
}
test$x
test$y
test
?[]
?[
?`[``
?`[`
library(dplyr)
setClass("track", slots = c(data = "data.frame", type = "character"))
test <- new("track", data = data.frame(x = runif(10), y = runif(10), z = runif(10), t = runif(10)), type = "geo")
filter.track <- function(x, ...) {
new("track", data = dplyr::filter(x@data, ...), type = x@type)
}
`$.track` <- function(x, var) {
x@data[[var]]
}
`[.track` <- function(x, i, j = NULL, ...) {
if (is.null(j)) {
x@data[i]
} else {
x@data[i, j, ...]
}
}
test[1]
plop <- data.frame(x = runif(10), y = runif(10), z = runif(10), t = runif(10))
plop[1]
test[1, 2]
test[1:10, 2]
test[1:10, 2:3]
test[1:10, ]
library(dplyr)
setClass("track", slots = c(data = "data.frame", type = "character"))
test <- new("track", data = data.frame(x = runif(10), y = runif(10), z = runif(10), t = runif(10)), type = "geo")
filter.track <- function(x, ...) {
new("track", data = dplyr::filter(x@data, ...), type = x@type)
}
`$.track` <- function(x, var) {
x@data[[var]]
}
`[.track` <- function(x, i) {
x@data[i]
}
`[.track` <- function(x, i, j, ..., drop = TRUE) {
x@data[i, j, ..., drop = drop]
}
test[1]
test[1, 2]
test[1:10, 2]
test[1:10, 2:4]
class(test[1:10, 2:4])
class(test[1:10, ])
test[1:10, ]
install.packages(c("cluster", "gsl", "ipred", "moveVis", "RcppArmadillo"))
?png
if (!require(rvest)) {
install.packages("rvest", repos="http://cran.us.r-project.org")
require(rvest)
}
if (!require(dplyr)) {
install.packages("dplyr", repos="http://cran.us.r-project.org")
require(dplyr)
}
if (!require(knitr)) {
install.packages("knitr", repos="http://cran.us.r-project.org")
require(knitr)
}
if (!require(stringr)) {
install.packages("stringr", repos="http://cran.us.r-project.org")
require(stringr)
}
if (!require(ggplot2)) {
install.packages("ggplot2", repos="http://cran.us.r-project.org")
require(ggplot2)
}
###
scholar_html <- read_html("https://scholar.google.com/citations?user=4MNHWX8AAAAJ")
scholar_tab <- scholar_html %>%
html_nodes(xpath = '//*[@id="gsc_rsb_st"]') %>%
html_table(fill = TRUE)
names(scholar_tab[[1]])[1] <- paste0("As of ", format(Sys.time(), "%B %d, %Y"))
scholar_tab <- strsplit(kable(scholar_tab), "\n")[[1]]
scholar_page <- readLines("publications/index.md")
start <- grep("scholar.svg", scholar_page)
end <- min(which(scholar_page == "---")[which(scholar_page == "---") > start])
scholar_page <- scholar_page[-(start + 1):-(end - 1)]
out <- c(scholar_page[1:start], "", "{:.scholar}", scholar_tab, "", scholar_page[(start + 1):length(scholar_page)])
setwd("~/Google Drive/NJIT/Work/web/swarmlab")
if (!require(rvest)) {
install.packages("rvest", repos="http://cran.us.r-project.org")
require(rvest)
}
if (!require(dplyr)) {
install.packages("dplyr", repos="http://cran.us.r-project.org")
require(dplyr)
}
if (!require(knitr)) {
install.packages("knitr", repos="http://cran.us.r-project.org")
require(knitr)
}
if (!require(stringr)) {
install.packages("stringr", repos="http://cran.us.r-project.org")
require(stringr)
}
if (!require(ggplot2)) {
install.packages("ggplot2", repos="http://cran.us.r-project.org")
require(ggplot2)
}
###
scholar_html <- read_html("https://scholar.google.com/citations?user=4MNHWX8AAAAJ")
scholar_tab <- scholar_html %>%
html_nodes(xpath = '//*[@id="gsc_rsb_st"]') %>%
html_table(fill = TRUE)
names(scholar_tab[[1]])[1] <- paste0("As of ", format(Sys.time(), "%B %d, %Y"))
scholar_tab <- strsplit(kable(scholar_tab), "\n")[[1]]
scholar_page <- readLines("publications/index.md")
start <- grep("scholar.svg", scholar_page)
end <- min(which(scholar_page == "---")[which(scholar_page == "---") > start])
scholar_page <- scholar_page[-(start + 1):-(end - 1)]
out <- c(scholar_page[1:start], "", "{:.scholar}", scholar_tab, "", scholar_page[(start + 1):length(scholar_page)])
scholar_df <- data.frame(years = scholar_html %>%
html_nodes(xpath = '//*[@class="gsc_g_t"]') %>%
html_text() %>%
as.numeric,
citations = scholar_html %>%
html_nodes(xpath = '//*[@class="gsc_g_al"]') %>%
html_text() %>%
as.numeric()) %>%
mutate(., cum_citations = cumsum(citations))
ggplot(scholar_df, aes(years)) +
geom_col(aes(y = cum_citations), fill = "#b4133b") +
geom_col(aes(y = cum_citations - citations), fill = "#008ea5") +
geom_text(aes(y = cum_citations, label = paste0("+", citations)),
position = position_dodge(width = 0.9), vjust = -0.75,
fontface = "bold", size = 5) +
xlab(NULL)+ ylab(NULL) +
scale_y_continuous(limits = c(0, 1.1 * max(scholar_df$cum_citations)),
sec.axis = sec_axis(~.)) +
theme_minimal(base_size = 18) +
theme(text = element_text(face = "bold"),
plot.background = element_rect(fill = "#ececec", color = "#cccccc"),
panel.grid.major = element_line(color = "#fafafa"),
panel.grid.minor = element_line(color = "#fafafa"))
if (!require(svglite)) {
install.packages("svglite", repos="http://cran.us.r-project.org")
require(svglite)
}
if (!require(rvest)) {
install.packages("rvest", repos="http://cran.us.r-project.org")
require(rvest)
}
if (!require(dplyr)) {
install.packages("dplyr", repos="http://cran.us.r-project.org")
require(dplyr)
}
if (!require(knitr)) {
install.packages("knitr", repos="http://cran.us.r-project.org")
require(knitr)
}
if (!require(stringr)) {
install.packages("stringr", repos="http://cran.us.r-project.org")
require(stringr)
}
if (!require(ggplot2)) {
install.packages("ggplot2", repos="http://cran.us.r-project.org")
require(ggplot2)
}
if (!require(svglite)) {
install.packages("svglite", repos="http://cran.us.r-project.org")
require(svglite)
}
scholar_html <- read_html("https://scholar.google.com/citations?user=4MNHWX8AAAAJ")
scholar_tab <- scholar_html %>%
html_nodes(xpath = '//*[@id="gsc_rsb_st"]') %>%
html_table(fill = TRUE)
names(scholar_tab[[1]])[1] <- paste0("As of ", format(Sys.time(), "%B %d, %Y"))
scholar_tab <- strsplit(kable(scholar_tab), "\n")[[1]]
scholar_page <- readLines("publications/index.md")
start <- grep("scholar.svg", scholar_page)
end <- min(which(scholar_page == "---")[which(scholar_page == "---") > start])
scholar_page <- scholar_page[-(start + 1):-(end - 1)]
scholar_df <- data.frame(years = scholar_html %>%
html_nodes(xpath = '//*[@class="gsc_g_t"]') %>%
html_text() %>%
as.numeric,
citations = scholar_html %>%
html_nodes(xpath = '//*[@class="gsc_g_al"]') %>%
html_text() %>%
as.numeric()) %>%
mutate(., cum_citations = cumsum(citations))
svglite("img/posts/publications/scholar.svg", width = 9, height = 3)
ggplot(scholar_df, aes(years)) +
geom_col(aes(y = cum_citations), fill = "#b4133b") +
geom_col(aes(y = cum_citations - citations), fill = "#008ea5") +
geom_text(aes(y = cum_citations, label = paste0("+", citations)),
position = position_dodge(width = 0.9), vjust = -0.75,
fontface = "bold", size = 5) +
xlab(NULL)+ ylab(NULL) +
scale_y_continuous(limits = c(0, 1.1 * max(scholar_df$cum_citations)),
sec.axis = sec_axis(~.)) +
theme_minimal(base_size = 18) +
theme(text = element_text(face = "bold"),
plot.background = element_rect(fill = "#ececec", color = "#cccccc"),
panel.grid.major = element_line(color = "#fafafa"),
panel.grid.minor = element_line(color = "#fafafa"))
dev.off()
